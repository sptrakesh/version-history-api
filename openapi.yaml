openapi: 3.0.3
info:
  title: Version History REST API
  description: |
    REST API for common actions around document version history stored in
    __MongoDB__ via [mongo-service](https://github.com/sptrakesh/mongo-service).

    ### Formats
    Document payloads can be encoded as either __BSON__ or __JSON__.  This applies
    to both input document payloads (CRUD API), and for the the outputs for all
    API endpoints.

    __JSON__ encoding is via the Mongo C driver utility function to convert
    __BSON__ to __JSON__.

    ### Compression
    Compressed output is supported and encouraged.  Only `gzip` compression is
    supported by the service.  Output is compressed only if the output document
    size exceeds `128` bytes.

    ### Correlation Id
    Clients can specify a `correlationId` for each request
    if they wish to correlate log records that are generated across the system.
    This can be specified via a custom `x-spt-correlation-id` HTTP header.
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /version/history/list/{database}/{collection}/{objectId}:
    get:
      summary: Endpoint to retrieve metadata about history documents for specified entity.
      description: Returns metadata in chronological order of all versions for the specified entity.
      tags:
        - VersionHistory
      operationId: list
      parameters:
        - name: database
          description: The database in which the entity is stored.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection in which the entity is stored.
          in: path
          required: true
          schema:
            type: string
            example: users
        - name: objectId
          description: The BSON object id for the entity.
          in: path
          required: true
          schema:
            type: string
            example: 5f3bc9e2502422053e08f9f1
      responses:
        200:
          description: Document with a list of _version history_ summary documents.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistorySummary"
            application/bson:
              schema:
                $ref: "#/components/schemas/HistorySummary"
        400:
          description: If `objectId` is not a valid BSON object id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: If the specified `objectId` does not exist in the `database:collection`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while retrieving the history document summary.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /version/history/document/{objectId}:
    get:
      summary: Endpoint to retrieve the full version history document.
      description: Returns the full version history document identified by the specified BSON object id.
      tags:
        - VersionHistory
      operationId: document
      parameters:
        - name: objectId
          description: The BSON object id for the version history document.  This is usually derived from a call to the `list` endpoint.
          in: path
          required: true
          schema:
            type: string
            example: 5f3bc9e2502422053e08f9f1
      responses:
        200:
          description: The complete version history document.  The document versioned is available as the `entity` sub-document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoryDocument"
            application/bson:
              schema:
                $ref: "#/components/schemas/HistoryDocument"
        400:
          description: If `objectId` is not a valid BSON object id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: If the specified `objectId` does not exist in the version history `database:collection`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while retrieving the history document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /version/history/entity/{objectId}:
    get:
      summary: Endpoint to retrieve the original document stored in version history.
      description: Returns the __entity__ that was versioned.  Returns only the nested document without the version history wrapper.
      tags:
        - VersionHistory
      operationId: entity
      parameters:
        - name: objectId
          description: The BSON object id for the version history document.  This is usually derived from a call to the `list` endpoint.
          in: path
          required: true
          schema:
            type: string
            example: 5f3bc9e2502422053e08f9f1
      responses:
        200:
          description: The entity that was versioned.
          content:
            application/json:
              schema:
                type: object
                required:
                  - _id
                properties:
                  _id:
                    type: string
                    description: BSON Object ID for the history document.
                    example: 5f3bc9e2502422053e08f9f1
            application/bson:
              schema:
                type: object
                required:
                  - _id
                properties:
                  _id:
                    type: string
                    description: BSON Object ID for the history document.
                    example: 5f3bc9e2502422053e08f9f1
        400:
          description: If `objectId` is not a valid BSON object id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: If the specified `objectId` does not exist in the version history `database:collection`.
        417:
          description: If the `mongo-service` returns an error while retrieving the history document.
        500:
          description: If errors were encountered communicating with `mongo-service`.

  /version/history/revert/{historyObjectId}/{database}/{collection}/{entityObjectId}:
    put:
      summary: Endpoint to revert the specified document to its previous version.
      description: |
        Replaces the specified entity with its previous version specified by
        `historyObjectId`.

        __Note:__ This is a `PUT` operation as it modifies data in the database.
        No __payload__ is expected from the client.
      tags:
        - VersionHistory
      operationId: revert
      parameters:
        - name: historyObjectId
          description: The BSON object id of the version history document to revert the entity to.
          in: path
          required: true
          schema:
            type: string
            example: 5fa9910b8a64e17d2911e67a
        - name: database
          description: The database in which the entity is stored.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection in which the entity is stored.
          in: path
          required: true
          schema:
            type: string
            example: users
        - name: entityObjectId
          description: The BSON object id for the entity to be reverted.
          in: path
          required: true
          schema:
            type: string
            example: 5f3bc9e2502422053e08f9f1
      responses:
        200:
          description: The entity that was reverted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - _id
                properties:
                  _id:
                    type: string
                    description: BSON Object ID for the history document.
                    example: 5f3bc9e2502422053e08f9f1
            application/bson:
              schema:
                type: object
                required:
                  - _id
                properties:
                  _id:
                    type: string
                    description: BSON Object ID for the history document.
                    example: 5f3bc9e2502422053e08f9f1
        400:
          description: If either of the ids specified is not a valid BSON object id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: If the specified `historyObjectId` does not exist in the version history database collection.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while retrieving the history document summary.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /crud/create/{database}/{collection}:
    post:
      summary: Endpoint to create a new document.
      description: |
        Create a new document as specified in the request payload in the
        `database:collection` specified as path parameters.

        The response will be the small metadata document as returned by the
        `mongo-service`.

        __Note:__ This is a `POST` operation as the process is not idempotent.
        Only the first request to create a document with a specified object id
        will succeed.  Any subsequent requests with the same payload will fail.
      tags:
        - CRUD
      operationId: create
      parameters:
        - name: database
          description: The database in which the entity is to be created.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection in which the entity is to be created.
          in: path
          required: true
          schema:
            type: string
            example: users
      requestBody:
        description: The document that is to be created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocument"
          application/bson:
            schema:
              $ref: "#/components/schemas/CreateDocument"
        required: true
      responses:
        200:
          description: The entity that was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/CreateResponse"
        400:
          description: If the input document payload is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while creating the document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /crud/update/{database}/{collection}:
    post:
      summary: Endpoint to modify existing document(s) with  the input data.
      description: |
        Merges all documents in the specified `database:collection` matching
        the filter query with the specified document.

        Version history documents with the post-update version of the matching
        documents are created.

        **Note**: This is a `POST` request since the number of documents updated
        can vary between different invocations of this endpoint depending upon
        the `filter` query.
      tags:
        - CRUD
      operationId: update
      parameters:
        - name: database
          description: The database in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: users
      requestBody:
        description: The document that contains the filter query and the document data to merge.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRequest"
          application/bson:
            schema:
              $ref: "#/components/schemas/UpdateRequest"
        required: true
      responses:
        200:
          description: |
            A document with basic metadata about the results of the update
            operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatesResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/UpdatesResponse"
        400:
          description: If the input document payload is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while updating documents.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /crud/update/{database}/{collection}/{id}:
    put:
      summary: Endpoint to replace an existing document with  the input data.
      description: |
        Replaces the document identified by the specified `database:collection:id`
        with the input payload.

        A version history document with the payload contents is created.

        The input payload **must** contain the `_id` property.
      tags:
        - CRUD
      operationId: updateById
      parameters:
        - name: database
          description: The database in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: users
        - name: id
          description: The BSON object id for the document to be updated.
          in: path
          required: true
          schema:
            type: string
            example: 5f3bc9e2502422053e08f9f1
      requestBody:
        description: The document that is to be merged into the existing document.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocument"
          application/bson:
            schema:
              $ref: "#/components/schemas/CreateDocument"
        required: true
      responses:
        200:
          description: |
            A document that contains the updated entity as well as information
            about the version history that was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
        400:
          description: If the input document payload is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while updating the document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Endpoint to merge the input data into the specified document.
      description: |
        Merges the payload data into the document identified by the specified
        `database:collection:id`.

        A version history document with the post-update contents of the document
        is created.

        The input payload **must** contain the `_id` property.
      tags:
        - CRUD
      operationId: mergeById
      parameters:
        - name: database
          description: The database in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: users
        - name: id
          description: The BSON object id for the document to be updated.
          in: path
          required: true
          schema:
            type: string
            example: 5f3bc9e2502422053e08f9f1
      requestBody:
        description: The document that is to be merged into the existing document.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateResponse"
          application/bson:
            schema:
              $ref: "#/components/schemas/UpdateResponse"
        required: true
      responses:
        200:
          description: |
            A document that contains the updated entity as well as information
            about the version history that was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
        400:
          description: If the input document payload is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while updating the document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /crud/replace/{database}/{collection}:
    put:
      summary: Endpoint to replace a document matched by a specified filter query.
      description: |
        Replace an existing document matched by an input `filter` query document
        with the specified `replace` document.

        If multiple documents match the `filter`, the first one returned by MongoDB
        is replaced.

        The replacement document need not include the `_id` property.  If the caller
        has access to the `_id`, there would be no reason to use a `filter` query.
        The same can be achieved by making a `PUT` request to the *update* endpoint.
        Of course the `filter` query can be by `_id` property.
      tags:
        - CRUD
      operationId: replace
      parameters:
        - name: database
          description: The database in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection in which the entity exists.
          in: path
          required: true
          schema:
            type: string
            example: users
      requestBody:
        description: The document with the `filter` query and the `replace` document.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceRequest"
          application/bson:
            schema:
              $ref: "#/components/schemas/ReplaceRequest"
        required: true
      responses:
        200:
          description: |
            A document that contains the updated entity as well as information
            about the version history that was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
        400:
          description: If the input document payload is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while updating the document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /crud/retrieve/{database}/{collection}/{property}/{value}:
    get:
      summary: Endpoint to retrieve documents with the specified combination.
      description: |
        Retrieve document(s) from the specified `database:collection`
        matching the specified combination of property name and value.

        Since the `value` is specified as a `path` parameter, this is intended
        for use for simple `string` values which do not have spaces or other
        special characters.  When specifying complex values, the request `path`
        must be properly *URL encoded*.

        The `property` **must** hold a `string` type value for this endpoint to
        work.  The only exception is the case for `_id`, in which case the
        `value` will be parsed as a **BSON Object Id**.  This also means that
        non object id `_id` values are not supported.

        The response will be the entire document(s) as stored in the specified
        database collection.

        If the `property` specified is the `_id` property the response will
        include only the `result` object.  For any other property (even if it
        is a *unique* property) the response will include the `results` array.
        The response will have only one or the other of `result` or `results`
        (mutually exclusive).
      tags:
        - CRUD
      operationId: retrieve
      parameters:
        - name: database
          description: The database from which entities are to be retrieved.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection from which entities are to be retrieved.
          in: path
          required: true
          schema:
            type: string
            example: users
        - name: property
          description: The name of the property to find matching document.
          in: path
          required: true
          schema:
            type: string
            example: email
        - name: property
          description: The name of the property to find matching document.
          in: path
          required: true
          schema:
            type: string
            example: username
        - name: value
          description: The value to match for the specified property.
          in: path
          required: true
          schema:
            type: string
            example: test@test.com
      responses:
        200:
          description: The document(s) that were retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/RetrieveResponse"
        400:
          description: If the path parameters are not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while creating the document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /crud/query/{database}/{collection}:
    post:
      summary: Endpoint to retrieve documents matching a query.
      description: |
        Execute the specified query against the specified `database:collection`.

        If the `query` specified is the `_id` property the response will
        include only the `result` object.  For any other query the response will
        include the `results` array. The response will have only one or the
        other of `result` or `results` (mutually exclusive).

        __Note:__ If no `options` is specified a default `options` with a `limit`
        of `100` is applied.  This is to avoid running the instance out of memory
        unless the caller explicitly requests a larger result set.  When the caller
        explicitly specified `options`, the expectation is that the caller has
        also specified a *sane* `limit`.
      tags:
        - CRUD
      operationId: query
      parameters:
        - name: database
          description: The database from which entities are to be retrieved.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection from which entities are to be retrieved.
          in: path
          required: true
          schema:
            type: string
            example: users
      requestBody:
        description: Document with the specifications for the query to be executed.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryDocument"
          application/bson:
            schema:
              $ref: "#/components/schemas/QueryDocument"
        required: true
      responses:
        200:
          description: The document(s) that were retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/RetrieveResponse"
        400:
          description: If the path parameters are not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        412:
          description: If the input query specification is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while creating the document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

  /crud/delete/{database}/{collection}/{id}:
    delete:
      summary: Endpoint to delete a document.
      description: |
        Delete the specified document from the database.  Note that deleting
        documents from the version history `database:collection` is not supported.
      tags:
        - CRUD
      operationId: delete
      parameters:
        - name: database
          description: The database from which the entity is to be deleted.
          in: path
          required: true
          schema:
            type: string
            example: sptdb
        - name: collection
          description: The collection from which the entity is to be deleted.
          in: path
          required: true
          schema:
            type: string
            example: users
        - name: id
          description: The BSON object id for the document to be deleted.
          in: path
          required: true
          schema:
            type: string
            example: 5f3bc9e2502422053e08f9f1
      responses:
        200:
          description: |
            Document with information about the document that was deleted.
            Of most interest is the information returned about the version
            history document that was created as a result of the `delete`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
            application/bson:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        400:
          description: If `objectId` is not a valid BSON object id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: If the specified `objectId` does not exist in the specified `database:collection`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        417:
          description: If the `mongo-service` returns an error while deleting the document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: If errors were encountered communicating with `mongo-service`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/bson:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      description: Common format for returning errors from the service.
      type: object
      required:
        - code
        - cause
      properties:
        status:
          type: integer
          description: Usually the same as the HTTP status code for the response.
          example: 417
        cause:
          type: string
          description: A short description of the cause of error.
          example: "Not found"

    HistorySummary:
      description: Version history summary information.
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            type: object
            required:
              - _id
              - action
              - created
            properties:
              _id:
                type: string
                description: BSON Object ID for the history document.
                example: 5f3bc9e2502422053e08f9f1
              action:
                type: string
                description: The `action` which resulted in the history document being created.
                enum:
                  - create
                  - update
                  - delete
                example: create
              created:
                type: string
                format: date-time
                description: The timestamp at which the version was created.

    HistoryDocument:
      description: Standard structure for version history document.
      type: object
      required:
        - _id
        - database
        - collection
        - action
        - entity
        - created
      properties:
        _id:
          type: string
          description: BSON Object ID for the history document.
          example: 5f3bc9e2502422053e08f9f1
        database:
          type: string
          description: Database in which the versioned entity is (or was) stored.
          example: sptdb
        collection:
          type: string
          description: Collection in which the versioned entity is (or was) stored.
          example: users
        action:
          type: string
          description: The `action` which resulted in the history document being created.
          enum:
            - create
            - update
            - delete
          example: update
        created:
          type: string
          format: date-time
          description: The timestamp at which the version was created.
        entity:
          type: object
          description: The document that was versioned.  At the very least it will contain an `_id` property as documented here.  The document will have other properties as was saved originally.
          properties:
            _id:
              type: string
              description: BSON Object ID for the versioned entity.
              example: 5f3bc9e2502422053e08f9f1
        metadata:
          type: object
          description: Optional metadata associted with the version.  This is user supplied information when submitting payloads to `mongo-service`.
          properties:
            revertedFrom:
              type: string
              description: BSON Object Id of the version history document which was reverted, leading to this version being created.
              example: 5f3bc9e2502422053e08f9f1

    CreateDocument:
      description: |
        Standard structure for a payload document sent to the utility `create`
        endpoint.

        Only the mandatory `_id` property is documented.  Other properties can
        be included as appropriate, and will be saved to the specified
        `database:collection`.
      type: object
      additionalProperties: true
      required:
        - _id
      properties:
        _id:
          type: string
          description: |
            BSON Object ID for the document to be created.

            __Note:__ When sending data in __JSON__ format, make sure it is wrapped
            into an object (`"_id": { "$oid": "5f3bc9e29ba4f45f810edf22" }`) to be
            parsed into __BSON__ using MongoDB C driver JSON parser.
          example: 5f3bc9e2502422053e08f9f1

    CreateResponse:
      description: |
        Structure returned by the `create` document endpoint.  This is the same
        structure that is returned by the `mongo-service`.  Only minimal
        metadata is returned to the client.
      type: object
      required:
        - _id
        - database
        - collection
        - entity
      properties:
        _id:
          type: string
          description: |
            BSON Object ID for the document that was created.  This is the same
            value that was specified in the request.

            __Note:__ When response data is in __JSON__ format, the `_id` is wrapped
            in an object (`"_id": { "$oid": "5f3bc9e29ba4f45f810edf22" }`) by
            the MongoDB C driver JSON converter.
          example: 5f3bc9e2502422053e08f9f1
        database:
          type: string
          description: |
            The *version history* database in which the initial `create` version
            of the document was stored.

            In keeping with the version history implementation, the input document
            is duplicated in the version history database.
          example: versionHistory
        collection:
          type: string
          description: |
            The *version history* collection in which the initial `create` version
            of the document was stored.
          example: entities
        entity:
          type: string
          description: |
            BSON Object ID for the version history document that was created.
            This can be used to retrieve the history document.

            __Note:__ When response data is in __JSON__ format, the `_id` is wrapped
            in an object (`"_id": { "$oid": "5f35e5e19e48c37186539141" }`) by
            the MongoDB C driver JSON converter.
          example: 5f35e5e19e48c37186539141

    UpdateRequest:
      description: |
        Structure for a general purpose update request.  Update is expressed
        as a combination of an update `filter` query, and the document to merge
        in to all matching documents in the specified `database:collection`.

        This endpoint can be used to apply standard information to a number
        of documents matching the input filter.  In the extreme case, this can
        be used to add some standard properties to all documents in a `collection`.

        Each document matching the `filter` is retrieved post-merge, and a
        corresponding version history document generated.  This post-processing
        can add quite a lot of time to the request.

        **Note:** When updating documents by a filter query with `_id` property,
        use the endpoint that takes the `{id}` path parameter.
      type: object
      required:
        - filter
        - update
      properties:
        filter:
          type: object
          additionalProperties: true
          description: |
            The filter query to use to find candidate documents that are to be
            updated.  If the filter matches multiple documents, all matching
            documents are updated.

            __Note:__ When sending data in __JSON__ format, make sure special
            types such as BSON Object Id, date, etc are encoded in the format
            expected by the MongoDB JSON parser.
          example: {
            "group": "users",
            "role": "admin"
          }
        update:
          type: object
          additionalProperties: true
          description: |
            The data that is to be merged into all documents matching the input
            filter query.  In general this should not include the `_id` (or any
            unique fields for that matter) field, unless the input filter query
            matches exactly one document.
          example: {
            "modified": { "$date" : 1608780307513 },
            "user": {
              "_id" : { "$oid" : "5fe409f879634171a83232a3" },
              "username": "rakesh"
            }
          }

    UpdatesResponse:
      description: |
        Response returned in response to multi-document update by filter
        query.  Only very minimal information is returned in the response.
      type: object
      properties:
        success:
          type: integer
          description: The number of successful updates for the input filter.
          example: 5
        failure:
          type: integer
          description: The number of failed updates for the input filter.
          example: 5
        history:
          type: array
          description: |
            Array of BSON ObjectId values for the version history documents
            created for the updates.
          example: [
            { "$oid": "5f35e5e1e799c52186039122" },
            { "$oid" : "5fe409f879634171a83232a3" }
          ]

    UpdateResponse:
      description: |
        Structure returned by the `update` document endpoint.  This is the same
        structure that is returned by the `mongo-service`.

        The `document` element in the response will be entire current document
        in the `database:collection`.  Only the mandatory `_id` can be documented.
      type: object
      properties:
        document:
          type: object
          additionalProperties: true
          description: |
            The full (result after merging input) document that is the current
            content for the specified document.
          example: {
            "_id": {
              "$oid": "5f35e5e1e799c52186039122"
            },
            "intValue": 123,
            "floatValue": 123.0,
            "boolValue": true,
            "stringValue": "abc123",
            "nested": { "key": "value" }
          }
        history:
          type: object
          description: |
            Metadata about the version history document that was generated
            by the update action.
          example: {
            "_id": {
              "$oid": "5f35e887e799c5218603915b"
            },
            "database": "sptdb",
            "collection": "users",
            "entity": {
              "$oid": "5f35e5e1e799c52186039122"
            }
          }

    ReplaceRequest:
      description: |
        Structure for a general purpose replace request.  Replace is expressed
        as a combination of an update `filter` query (should return a single
        matching document), and the `replace` document to replace the existing
        document in the specified `database:collection`.

        Since this is a full replace, the replacement document must be the full
        document (the `_id` field is optional).

        The post-update document is retrieved (if `_id` is not included) to create
        the version history document.
      type: object
      required:
        - filter
        - replace
      properties:
        filter:
          type: object
          additionalProperties: true
          description: |
            The filter query to use to find the candidate document that is to be
            updated.  If the filter matches multiple documents, the first one
            returned is updated.

            __Note:__ When sending data in __JSON__ format, make sure special
            types such as BSON Object Id, date, etc are encoded in the format
            expected by the MongoDB JSON parser.
          example: {
            "group": "users",
            "role": "admin"
          }
        replace:
          type: object
          additionalProperties: true
          description: |
            The document to replace the existing document that matches the
            filter query.

            **Note:** The `_id` is not required.  MongoDB handles merging the
            existing `_id` with the `replace` document as needed.
          example: {
            "_id": {
              "$oid": "5f35e887e799c5218603915b"
            },
            "modified": { "$date" : 1608780307513 },
            "user": {
              "_id" : { "$oid" : "5fe409f879634171a83232a3" },
              "username": "rakesh"
            }
          }

    RetrieveResponse:
      description: |
        General description of the document that is returned by the `mongo-service`
        when retrieving documents.
      type: object
      properties:
        result:
          type: object
          additionalProperties: true
          description: |
            A single document that is returned when the retrieval was performed
            by the BSON ObjectId `_id` property.
          example: {
            "_id": {
              "$oid": "5f35e5e1e799c52186039122"
            },
            "intValue": 123,
            "floatValue": 123.0,
            "boolValue": true,
            "stringValue": "abc123",
            "nested": { "key": "value" }
          }
        results:
          type: array
          description: |
            Array of matching documents returned when the retrieval was performed
            by any other property (or arbitrarily complex query).  If the match
            was performed on a `unique` property, the array will have only one
            document.
          items:
            description: |
              A matching document included in the `results` array.  Since this
              is a general definition, we can document only the mandatory
              `_id` BSON Object Id property.  In almost all cases the document
              will have additional properties, depending on the data stored in
              the target collection.
            type: object
            additionalProperties: true
            required:
              - _id
            properties:
              _id:
                type: string
                description: |
                  BSON Object ID for the document that was deleted.  This is the same
                  value that was specified in the path.

                  __Note:__ When response data is in __JSON__ format, the `_id` is wrapped
                  in an object (`"_id": { "$oid": "5f3bc9e29ba4f45f810edf22" }`) by
                  the MongoDB C driver JSON converter.
                example: 5f3bc9e2502422053e08f9f1
          example: [
            {
              "_id": {
                "$oid": "5f35e5e1e799c52186039122"
              },
              "intValue": 123,
              "floatValue": 123.0,
              "boolValue": true,
              "stringValue": "abc123",
              "nested": { "key": "value" }
            }
          ]

    QueryDocument:
      description: |
        A MongoDB query document.

        When making the query using JSON encoding, ensure that the query can be
        parsed into BSON using the MongoDB driver.
      type: object
      required:
        - query
      properties:
        query:
          description: |
            The query will be passed *as-is* to the `mongo-service`.  No properties
            are documented as there are no mandatory properties.  Consult the
            MongoDB documentation for valid query syntax.
          type: object
          example: {
            "group": "admin",
            "created": {"$gt": { "$date": "2020-08-18T12:30:00.000Z" } }
          }
        options:
          description: |
            Options to control output from the *query*.  Use to control result
            sorting, properties included in the returned documents etc.

            __Note:__ Callers are strongly adviced to *always* specify the
            `limit` option to restrict the maximum number of matching documents.
            Use standard *pagination* techniques (include a `$gt` clause when
            retrieving additional results) to ensure the query is optimal.
          type: object
          example: {
            "limit": 100,
            "sort": {"_id": -1},
            "projection": {"name": 1, "email": 1}
          }

    DeleteResponse:
      description: |
        Structure returned by the `delete` document endpoint. This is a
        simplified representation of the structure that is returned by the
        `mongo-service`.  In particular, the arrays returned by the service are
        transformed into singular objects since this endpoint only allows deleting
        a single document.
      type: object
      required:
        - _id
        - history
      properties:
        _id:
          type: string
          description: |
            BSON Object ID for the document that was deleted.  This is the same
            value that was specified in the path.

            __Note:__ When response data is in __JSON__ format, the `_id` is wrapped
            in an object (`"_id": { "$oid": "5f3bc9e29ba4f45f810edf22" }`) by
            the MongoDB C driver JSON converter.
          example: 5f3bc9e2502422053e08f9f1
        history:
          description: |
            Metadata about the version history document that was created as
            a result of deleting the specified document.  Clients may use this
            information to *revert* or *undo* the operation if so desired.
          type: object
          properties:
            _id:
              type: string
              description: |
                BSON Object ID for the document that was deleted.  This is the same
                value that was specified in the path.

                __Note:__ When response data is in __JSON__ format, the `_id` is wrapped
                in an object (`"_id": { "$oid": "5f3bc9e29ba4f45f810edf22" }`) by
                the MongoDB C driver JSON converter.
              example: 5f35ea61e799c521860391a9
            database:
              type: string
              description: Database in which the versioned entity is stored.
              example: sptdb
            collection:
              type: string
              description: Collection in which the versioned entity is stored.
              example: users
